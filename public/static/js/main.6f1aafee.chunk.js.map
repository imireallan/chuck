{"version":3,"sources":["queries/index.js","components/JokeItem.js","components/Category.js","components/Categories.js","components/Home.js","components/Header.js","components/NotFoundPage.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["GET_CATEGORIES","gql","GET_JOKE","JokeItem","category","useContext","MyContext","useQuery","variables","skip","notifyOnNetworkStatusChange","loading","error","data","refetch","networkStatus","className","type","color","src","jokes","icon_url","alt","value","href","url","onClick","Category","handleCategory","e","preventDefault","Categories","Fragment","categories","map","key","React","createContext","MyProvider","children","useState","setCategory","Provider","Home","Header","NotFoundPage","Routes","path","to","exact","component","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6f1aafee.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\n\nconst GET_CATEGORIES = gql`\n  {\n    categories\n  }\n`;\n\nconst GET_JOKE = gql`\n  query Joke($category: String!){\n    jokes(category: $category) {\n      id,\n      value,\n      categories,\n      icon_url,\n      url,\n    }\n  }\n`;\n\nexport {\n  GET_CATEGORIES,\n  GET_JOKE\n};","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Loader from 'react-loader-spinner';\n\n\nimport { GET_JOKE } from '../queries';\nimport { MyContext } from './Home';\n\nimport '../css/JokeItem.css';\n\nfunction JokeItem() {\n\tconst { category } = useContext(MyContext);\n\tconst { loading, error, data, refetch, networkStatus } = useQuery(GET_JOKE, {\n\t\tvariables: { category },\n\t\tskip: !category,\n\t\tnotifyOnNetworkStatusChange: true\n\t});\n \n\tif(loading || networkStatus === 4) {\n\t\treturn <Loader className=\"jokes__loader\" type=\"Bars\" color=\"rgb(255, 153, 0)\" />;\n\t}\n\n\tif (error) return `Error! ${error}`;\n\treturn (\n\t\t<div>\n\t\t\t{category ? (\n\t\t\t\t<div className=\"container joke-container flex\">\n\t\t\t\t\t<div className=\"joke\">\n\t\t\t\t\t\t<figure className=\"joke__image__container\">\n\t\t\t\t\t\t\t<img src={data.jokes.icon_url} alt=\"joke image\" className=\"joke__image\" />\n\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t<div className=\"joke__value\">\n\t\t\t\t\t\t\t<p>{data.jokes.value}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<a className=\"joke__url\" href={data.jokes.url}>\n\t\t\t\t\t\t\tvisit joke\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button onClick={() => refetch()} className=\"btn\">Fetch another joke</button>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className=\"container sub-title\">\n\t\t\t\t\t<h3>Choose a category to seejokes</h3>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default JokeItem;\n","import React, { useContext } from 'react';\nimport { MyContext } from './Home';\nimport '../css/Category.css';\n\nfunction Category({ data }) {\n\tconst { handleCategory } = useContext(MyContext);\n\n\tconst handleClick = (e) => {\n\t\te.preventDefault();\n\t\thandleCategory(data);\n\t};\n\treturn (\n\t\t<li className=\"category__item\">\n\t\t\t<a href=\"#\" onClick={handleClick}>\n\t\t\t\t{data}\n\t\t\t</a>\n\t\t</li>\n\t);\n}\n\nexport default Category;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport Category from './Category';\nimport { MyContext } from './Home';\nimport '../css/Categories.css';\n\nfunction Categories() {\n\tconst { data, error } = useContext(MyContext);\n\n\tconst displayCategories = () => {\n\t\tif (error) return `Refresh the browser to fetch categories`;\n\t\treturn (\n\t\t\tdata &&\n\t\t\tdata.categories.map((category) => {\n\t\t\t\treturn <Category key={category} data={category} />;\n\t\t\t})\n\t\t);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<h4 className=\"title\">Categories</h4>\n\t\t\t<ul>{displayCategories()}</ul>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default Categories;\n","import React, { useState, useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Loader from 'react-loader-spinner';\n\nimport { GET_CATEGORIES } from '../queries';\nimport JokeItem from './JokeItem';\nimport Categories from './Categories';\nimport '../css/Home.css';\n\nexport const MyContext = React.createContext();\n\nfunction MyProvider({ children }) {\n\tconst [ category, setCategory ] = useState();\n\tconst { loading, error, data } = useQuery(GET_CATEGORIES);\n\n\tconst handleCategory = (category) => {\n\t\tsetCategory(category);\n\t};\n\treturn (\n\t\t<MyContext.Provider value={{ category, loading, error, data, handleCategory }}>{children}</MyContext.Provider>\n\t);\n}\n\nfunction Home() {\n\tconst { loading } = useContext(MyContext);\n\treturn (\n\t\t<main className=\"main container\">\n\t\t\t<section className=\"sidebar\">\n\t\t\t\t{loading ? <Loader className=\"loader\" type=\"Bars\" color=\"rgb(255, 153, 0)\" /> : <Categories />}\n\t\t\t</section>\n\t\t\t<section className=\"main-home\">\n\t\t\t\t<h2 className=\"main__title\">Chuck Noriss Jokes</h2>\n\t\t\t\t<JokeItem />\n\t\t\t</section>\n\t\t</main>\n\t);\n}\n\nexport default () => {\n\treturn (\n\t\t<MyProvider>\n\t\t\t<Home />\n\t\t</MyProvider>\n\t);\n};\n","import React from 'react';\nimport '../css/Header.css'\n\nfunction Header() {\n\treturn (\n        <header className=\"header\">\n            <div className=\"container flex\">\n                <a className=\"header__logo\" href=\"#\">Chuck Norris<sup>JOKES</sup></a>\n                <nav className=\"nav\">\n                    <ul className=\"nav__list flex\">\n                        <li className=\"nav__list__item\"><a className=\"nav__link\" href=\"#\">home</a></li>\n                        <li className=\"nav__list__item\"><a className=\"nav__link\" href=\"#\">about</a></li>\n                        <li className=\"nav__list__item\"><a className=\"nav__link\" href=\"#\">contact</a></li>\n                    </ul>\n                </nav>\n            </div>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from 'react'\n\nfunction NotFoundPage() {\n    return (\n        <div>\n            <h1>Error: 404 Page Not Found...</h1>\n        </div>\n    )\n}\n\nexport default NotFoundPage\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport Header from './components/Header';\nimport NotFoundPage from './components/NotFoundPage'\n\nconst Routes = () => (\n\t<Router>\n\t\t<Header />\n\t\t<Switch>\n\t\t\t<Route path=\"/home\">\n\t\t\t\t<Redirect to=\"/\" />\n\t\t\t</Route>\n\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t<Route path=\"*\">\n\t\t\t\t<NotFoundPage />\n\t\t\t</Route>\n\t\t</Switch>\n\t</Router>\n);\n\nexport default Routes;\n","import React from 'react';\nimport  ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport Routes from './routes';\n\n// const cache = new InMemoryCache();\nconst uri = '/graphql'\n\n// Apollo client\nconst client = new ApolloClient({\n\turi\n});\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<Routes />;\n\t\t</ApolloProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}